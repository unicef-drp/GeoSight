{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GeoSight \u00b6 QUICK INSTALLATION GUIDE \u00b6 Production \u00b6 git clone https://github.com/unicef-drp/GeoSight cd GeoSight/deployment docker-compose up -d The web will be available at http://127.0.0.1/ To stop containers: docker-compose kill To stop and delete containers: docker-compose down Development \u00b6 git clone https://github.com/unicef-drp/GeoSight cd GeoSight/deployment cp .template.env .env docker-compose.override.template.yml docker-compose.override.yml cd GeoSight make up make dev The web will be available at http://localhost:2000/ To stop dev: make dev-kill To reload container: make dev-reload Setup onedrive \u00b6 Download onedrive by sudo apt-get install onedrive Execute onedrive --get-O365-drive-id '<your site name to search>' It will ask to click an url and put back the url that created on browser It will show an information. Check drive_id and copy it. Open file deployment/onedrive/config and put it to drive_id make onedrive-firstrun to run first config It will ask to click an url and put back the url that created on browser Wait the system to finish the sync After that we can stop it and do make up More information: https://github.com/abraunegg/onedrive/blob/master/docs/SharePoint-Shared-Libraries.md","title":"GeoSight"},{"location":"#geosight","text":"","title":"GeoSight"},{"location":"#quick-installation-guide","text":"","title":"QUICK INSTALLATION GUIDE"},{"location":"#production","text":"git clone https://github.com/unicef-drp/GeoSight cd GeoSight/deployment docker-compose up -d The web will be available at http://127.0.0.1/ To stop containers: docker-compose kill To stop and delete containers: docker-compose down","title":"Production"},{"location":"#development","text":"git clone https://github.com/unicef-drp/GeoSight cd GeoSight/deployment cp .template.env .env docker-compose.override.template.yml docker-compose.override.yml cd GeoSight make up make dev The web will be available at http://localhost:2000/ To stop dev: make dev-kill To reload container: make dev-reload","title":"Development"},{"location":"#setup-onedrive","text":"Download onedrive by sudo apt-get install onedrive Execute onedrive --get-O365-drive-id '<your site name to search>' It will ask to click an url and put back the url that created on browser It will show an information. Check drive_id and copy it. Open file deployment/onedrive/config and put it to drive_id make onedrive-firstrun to run first config It will ask to click an url and put back the url that created on browser Wait the system to finish the sync After that we can stop it and do make up More information: https://github.com/abraunegg/onedrive/blob/master/docs/SharePoint-Shared-Libraries.md","title":"Setup onedrive"},{"location":"setup/","text":"Setup \u00b6 This document covers how you can set up the project, for production and development environment setup.","title":"Setup"},{"location":"setup/#setup","text":"This document covers how you can set up the project, for production and development environment setup.","title":"Setup"},{"location":"setup/installation/preparation/","text":"Preparation \u00b6 Dependencies installation \u00b6 The project provide make command that making setup process easier. To install make on your machine or virtual box server, do: sudo apt install make Project has recipe that you can use to run the project in one command. This recipe needs docker-compose to be able to use it. To install it, do: sudo apt install docker-compose apt install ca-certificates curl gnup lsb-release Docker installation \u00b6 The project needs docker to be able to run it. To install it, please follow below instruction. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg On the next prompt line: echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]https:download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Run apt update: sudo apt-get update This will install docker sudo apt-get install docker-ce-cli containerd.io This will check if installation of docker was successful sudo docker version And it should return like this Client: Docker Engine - Community Version: 20.10.9 API version: 1.41 Go version: go1.16.8 Git commit: c2ea9bc Built: Mon Oct 4 16:08:29 2021 OS/Arch: linux/amd64 Context: default Experimental: true Manage docker as non-root \u00b6 This will ensure that the docker can be executed without sudo. sudo systemctl daemon-reload sudo systemctl start docker sudo usermod -a -G $USER sudo systemctl enable docker Verify that you can run docker commands without sudo. docker run hello-world For more information how to install docker, please visit Install Docker Engine","title":"Preparation"},{"location":"setup/installation/preparation/#preparation","text":"","title":"Preparation"},{"location":"setup/installation/preparation/#dependencies-installation","text":"The project provide make command that making setup process easier. To install make on your machine or virtual box server, do: sudo apt install make Project has recipe that you can use to run the project in one command. This recipe needs docker-compose to be able to use it. To install it, do: sudo apt install docker-compose apt install ca-certificates curl gnup lsb-release","title":"Dependencies installation"},{"location":"setup/installation/preparation/#docker-installation","text":"The project needs docker to be able to run it. To install it, please follow below instruction. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg On the next prompt line: echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]https:download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Run apt update: sudo apt-get update This will install docker sudo apt-get install docker-ce-cli containerd.io This will check if installation of docker was successful sudo docker version And it should return like this Client: Docker Engine - Community Version: 20.10.9 API version: 1.41 Go version: go1.16.8 Git commit: c2ea9bc Built: Mon Oct 4 16:08:29 2021 OS/Arch: linux/amd64 Context: default Experimental: true","title":"Docker installation"},{"location":"setup/installation/preparation/#manage-docker-as-non-root","text":"This will ensure that the docker can be executed without sudo. sudo systemctl daemon-reload sudo systemctl start docker sudo usermod -a -G $USER sudo systemctl enable docker Verify that you can run docker commands without sudo. docker run hello-world For more information how to install docker, please visit Install Docker Engine","title":"Manage docker as non-root"},{"location":"setup/installation/project_setup/","text":"Project Setup \u00b6 Clone GeoSight repository \u00b6 This will clone the GeoSight repository to your machine git clone https://github.com/unicef-drp/GeoSight Set up the project \u00b6 This will set up the GeoSight project on your machine cd GeoSight cd deployment cp docker-compose.override.template.yml docker-compose.override.yml cp .template.env .env cd .. make up Wait until everything is done. After everything is done, open up a web browser and go to http://127.0.0.1/ and the dashboard will open: By Default, we can use the admin credential: username : admin password : admin Set up different environment \u00b6 To set up different environment, for example the Default credential, or the port of server, open deployment/.env . You can check the description below for each of variable. COMPOSE_PROJECT_NAME=geosight NGINX_TAG=0.0.1 -> Change this for different nginx image DJANGO_TAG=0.0.1 -> Change this for different django image DJANGO_DEV_TAG=0.0.1 -> Change this for different django dev image # Environments DJANGO_SETTINGS_MODULE=core.settings.prod -> Change this to use different django config file ADMIN_USERNAME=admin -> Default admin username ADMIN_PASSWORD=admin -> Default admin password ADMIN_EMAIL=admin@example.com -> Default admin email INITIAL_FIXTURES=True HTTP_PORT=80 -> Change the port of nginx # Database Environment DATABASE_NAME=django -> Default database name DATABASE_USERNAME=docker -> Default database username DATABASE_PASSWORD=docker -> Default database password DATABASE_HOST=db -> Default database host. Change this if you use cloud database or any new docker container. RABBITMQ_HOST=rabbitmq # Onedrive PUID=1000 PGID=1000 After you change the desired variable and do make up . It will rerun the project with new environment.","title":"Project setup"},{"location":"setup/installation/project_setup/#project-setup","text":"","title":"Project Setup"},{"location":"setup/installation/project_setup/#clone-geosight-repository","text":"This will clone the GeoSight repository to your machine git clone https://github.com/unicef-drp/GeoSight","title":"Clone GeoSight repository"},{"location":"setup/installation/project_setup/#set-up-the-project","text":"This will set up the GeoSight project on your machine cd GeoSight cd deployment cp docker-compose.override.template.yml docker-compose.override.yml cp .template.env .env cd .. make up Wait until everything is done. After everything is done, open up a web browser and go to http://127.0.0.1/ and the dashboard will open: By Default, we can use the admin credential: username : admin password : admin","title":"Set up the project"},{"location":"setup/installation/project_setup/#set-up-different-environment","text":"To set up different environment, for example the Default credential, or the port of server, open deployment/.env . You can check the description below for each of variable. COMPOSE_PROJECT_NAME=geosight NGINX_TAG=0.0.1 -> Change this for different nginx image DJANGO_TAG=0.0.1 -> Change this for different django image DJANGO_DEV_TAG=0.0.1 -> Change this for different django dev image # Environments DJANGO_SETTINGS_MODULE=core.settings.prod -> Change this to use different django config file ADMIN_USERNAME=admin -> Default admin username ADMIN_PASSWORD=admin -> Default admin password ADMIN_EMAIL=admin@example.com -> Default admin email INITIAL_FIXTURES=True HTTP_PORT=80 -> Change the port of nginx # Database Environment DATABASE_NAME=django -> Default database name DATABASE_USERNAME=docker -> Default database username DATABASE_PASSWORD=docker -> Default database password DATABASE_HOST=db -> Default database host. Change this if you use cloud database or any new docker container. RABBITMQ_HOST=rabbitmq # Onedrive PUID=1000 PGID=1000 After you change the desired variable and do make up . It will rerun the project with new environment.","title":"Set up different environment"},{"location":"setup/installation/development_setup/","text":"Development Environment \u00b6 This section is for setup development, so we can develop the project and check the changes in runtime. The sections depend on what interpreter that you use","title":"Development Environment"},{"location":"setup/installation/development_setup/#development-environment","text":"This section is for setup development, so we can develop the project and check the changes in runtime. The sections depend on what interpreter that you use","title":"Development Environment"},{"location":"setup/installation/development_setup/pycharm/","text":"Using pycharm \u00b6 This section is for using pycharm. Requirements: Pycharm Finished Setting up the project Setup interpreter \u00b6 Go to file -> setting -> Project -> Project Interpreter -> click cog -> add Go to ssh interpreter -> Fill the form like below Click next and fill docker as password Click next and change interpreter like below and click finish After finish, it will show all package like below. In current page, click path mappings , click + button and put local path to where the project (django-project folder) and remote path is like below. and click oK. Now the interpreter is done. When we restart the machine, we need to do make up to run the project. Setup run configuration \u00b6 After the interpreter is done, we need configuration to run the project in development mode. Click \"Add configuration\" like in the cursor in the image below. (top-right) There will be a popup, and click +, then click django server like below It will show the form and fill like below. Don't click the OK yet, but click Environment Variables and add environments like below 9by clicking + button). After that, click OK. Now we need to run the server by clicking go button in below image. When we click the go button, pycharm will run a process until like image below. Now it is done. We can access the development server in http://localhost:2000/ This development mode is DEBUG mode, and also whenever we change the code, the site will also change in runtime. For more information how to set up on pycharm, please visit Using a Docker Compose-Based Python Interpreter in PyCharm","title":"Using pycharm"},{"location":"setup/installation/development_setup/pycharm/#using-pycharm","text":"This section is for using pycharm. Requirements: Pycharm Finished Setting up the project","title":"Using pycharm"},{"location":"setup/installation/development_setup/pycharm/#setup-interpreter","text":"Go to file -> setting -> Project -> Project Interpreter -> click cog -> add Go to ssh interpreter -> Fill the form like below Click next and fill docker as password Click next and change interpreter like below and click finish After finish, it will show all package like below. In current page, click path mappings , click + button and put local path to where the project (django-project folder) and remote path is like below. and click oK. Now the interpreter is done. When we restart the machine, we need to do make up to run the project.","title":"Setup interpreter"},{"location":"setup/installation/development_setup/pycharm/#setup-run-configuration","text":"After the interpreter is done, we need configuration to run the project in development mode. Click \"Add configuration\" like in the cursor in the image below. (top-right) There will be a popup, and click +, then click django server like below It will show the form and fill like below. Don't click the OK yet, but click Environment Variables and add environments like below 9by clicking + button). After that, click OK. Now we need to run the server by clicking go button in below image. When we click the go button, pycharm will run a process until like image below. Now it is done. We can access the development server in http://localhost:2000/ This development mode is DEBUG mode, and also whenever we change the code, the site will also change in runtime. For more information how to set up on pycharm, please visit Using a Docker Compose-Based Python Interpreter in PyCharm","title":"Setup run configuration"}]}
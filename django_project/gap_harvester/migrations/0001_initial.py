# Generated by Django 3.2.13 on 2022-05-20 00:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('gap_data', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Harvester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('harvester_class', models.CharField(choices=[('gap_harvester.harveters.api_with_geography_and_today_date.APIWithGeographyAndTodayDate', 'API With Geography Using Today Date'), ('gap_harvester.harveters.api_with_geography_and_date.APIWithGeographyAndDate', 'API With Geography And Date'), ('gap_harvester.harveters.sharepoint_harvester.SharepointHarvester', 'Sharepoint File'), ('gap_harvester.harveters.using_exposed_api.UsingExposedAPI', 'Harvested using exposed API by external client'), ('gap_harvester.harveters.excel_harvester.ExcelHarvester', 'Excel Harvesters')], help_text='The type of harvester that will be used.Use class with full package.', max_length=256)),
                ('is_run', models.BooleanField(default=False, help_text='Is the harvester running.')),
                ('active', models.BooleanField(default=True, help_text='Make this harvester ready to be harvested.')),
                ('indicator', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gap_data.indicator')),
                ('user', models.ForeignKey(blank=True, help_text='User who run the harvester.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HarvesterLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True, help_text='This is when the harvester is started.')),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Running', 'Running'), ('Error', 'Error'), ('Done', 'Done')], default='Running', max_length=100)),
                ('note', models.TextField(blank=True, null=True)),
                ('detail', models.TextField(blank=True, help_text='The detail of the harvesters. Should be filled with array so can construct the data in array.', null=True)),
                ('harvester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gap_harvester.harvester')),
            ],
            options={
                'ordering': ('-start_time',),
            },
        ),
        migrations.CreateModel(
            name='HarvesterMappingValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remote_value', models.CharField(help_text='The original value from remote', max_length=512)),
                ('platform_value', models.CharField(help_text='The platform value', max_length=512)),
                ('harvester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gap_harvester.harvester')),
            ],
            options={
                'unique_together': {('harvester', 'remote_value')},
            },
        ),
        migrations.CreateModel(
            name='HarvesterAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of attribute', max_length=256)),
                ('value', models.CharField(blank=True, help_text='The value of attribute', max_length=512, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='harvester/attributes')),
                ('harvester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gap_harvester.harvester')),
            ],
            options={
                'unique_together': {('harvester', 'name')},
            },
        ),
    ]
